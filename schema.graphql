schema {
  query: Query
  mutation: Mutation
}

input CreateHorseCategoryInput {
  imageUrl: String!
  name: String!
}

input CreateHorseDisciplineInput {
  name: String!
}

input CreateHorseGenderInput {
  name: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Horse {
  age: Int!
  category: HorseCategory
  createdAt: DateTime
  description: String
  discipline: HorseDiscipline
  gender: HorseGender
  height: Int
  id: ID!
  images: [HorseImage!]
  location: String
  name: String!
  price: Float
  status: String
  updatedAt: DateTime
  user: User
  veterinaryDocumentAvailable: Boolean
  xrayResultsAvailable: Boolean
}

type HorseCategory {
  createdAt: DateTime
  horses: [Horse!]
  id: ID!
  imageUrl: String
  name: String
  updatedAt: DateTime
}

type HorseDiscipline {
  createdAt: DateTime
  horses: [Horse!]
  id: ID!
  name: String
  updatedAt: DateTime
}

type HorseGender {
  createdAt: DateTime
  horses: [Horse!]
  id: ID!
  name: String
  updatedAt: DateTime
}

type HorseImage {
  createdAt: DateTime
  horse: Horse
  id: ID!
  updatedAt: DateTime
  url: String
}

type Mutation {
  createHorse(age: Int!, categoryId: String!, description: String!, disciplineId: String!, genderId: String!, height: Int!, location: String!, name: String!, price: Float!, userId: String!): Horse
  createHorseCategory(data: CreateHorseCategoryInput!): HorseCategory
  createHorseDiscipline(data: CreateHorseDisciplineInput!): HorseDiscipline
  createHorseGender(data: CreateHorseGenderInput!): HorseGender
  deleteHorse(id: String!): Horse
  deleteHorseCategory(id: String!): HorseCategory
  deleteHorseDiscipline(id: String!): HorseDiscipline
  deleteHorseGender(id: String!): HorseGender
  updateHorse(age: Int, categoryId: String, description: String, disciplineId: String, genderId: String, height: Int, id: String!, name: String, price: Float, status: String): Horse
  updateHorseCategory(data: UpdateHorseCategoryInput!): HorseCategory
  updateHorseDiscipline(data: UpdateHorseDisciplineInput!): HorseDiscipline
  updateHorseGender(data: UpdateHorseGenderInput!): HorseGender
}

type Notification {
  createdAt: DateTime
  id: ID!
  message: String
  read: Boolean
  title: String
  updatedAt: DateTime
  user: User
  userId: ID
}

type Query {
  horse(id: String!): Horse
  horseCategories: [HorseCategory!]
  horseDisciplines: [HorseDiscipline!]
  horseGenders: [HorseGender!]
  horses(status: String): [Horse!]
  users: [User!]
}

input UpdateHorseCategoryInput {
  id: ID!
  imageUrl: String
  name: String
}

input UpdateHorseDisciplineInput {
  id: ID!
  name: String!
}

input UpdateHorseGenderInput {
  id: ID!
  name: String!
}

type User {
  createdAt: DateTime
  email: String
  firebaseUid: String
  horses: [Horse!]
  id: ID!
  name: String
  notifications: [Notification!]
  phoneNumber: String
  reviews: [UserReview!]
  role: String
  updatedAt: DateTime
  userFavoriteHorses: [UserFavoriteHorses!]
  verifiedSeller: Boolean
  whatsAppNumber: String
}

type UserFavoriteHorses {
  createdAt: DateTime
  horse: Horse
  horseId: ID
  id: ID!
  user: User
  userId: ID
}

type UserReview {
  comment: String
  createdAt: DateTime
  id: ID!
  rating: Int
  reviewer: String
  updatedAt: DateTime
  user: User
  userId: ID
}